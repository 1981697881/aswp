// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
import 'package:aswp/entity/login_entity.dart';
import 'package:aswp/generated/json/login_entity_helper.dart';

class JsonConvert<T> {
	T fromJson(Map<String, dynamic> json) {
		return _getFromJson<T>(runtimeType, this, json);
	}

  Map<String, dynamic> toJson() {
		return _getToJson<T>(runtimeType, this);
  }

  static _getFromJson<T>(Type type, data, json) {
		switch (type) {
			case LoginEntity:
				return loginEntityFromJson(data as LoginEntity, json) as T;
			case LoginContext:
				return loginContextFromJson(data as LoginContext, json) as T;
			case LoginContextUseLanguages:
				return loginContextUseLanguagesFromJson(data as LoginContextUseLanguages, json) as T;
			case LoginContextCurrentOrganizationInfo:
				return loginContextCurrentOrganizationInfoFromJson(data as LoginContextCurrentOrganizationInfo, json) as T;
			case LoginContextWeiboAuthInfo:
				return loginContextWeiboAuthInfoFromJson(data as LoginContextWeiboAuthInfo, json) as T;
			case LoginContextWeiboAuthInfoCharset:
				return loginContextWeiboAuthInfoCharsetFromJson(data as LoginContextWeiboAuthInfoCharset, json) as T;
			case LoginContextWeiboAuthInfoCharsetEncoderFallback:
				return loginContextWeiboAuthInfoCharsetEncoderFallbackFromJson(data as LoginContextWeiboAuthInfoCharsetEncoderFallback, json) as T;
			case LoginContextWeiboAuthInfoCharsetDecoderFallback:
				return loginContextWeiboAuthInfoCharsetDecoderFallbackFromJson(data as LoginContextWeiboAuthInfoCharsetDecoderFallback, json) as T;
			case LoginContextUTimeZone:
				return loginContextUTimeZoneFromJson(data as LoginContextUTimeZone, json) as T;
			case LoginContextSTimeZone:
				return loginContextSTimeZoneFromJson(data as LoginContextSTimeZone, json) as T;    }
		return data as T;
	}

  static _getToJson<T>(Type type, data) {
		switch (type) {
			case LoginEntity:
				return loginEntityToJson(data as LoginEntity);
			case LoginContext:
				return loginContextToJson(data as LoginContext);
			case LoginContextUseLanguages:
				return loginContextUseLanguagesToJson(data as LoginContextUseLanguages);
			case LoginContextCurrentOrganizationInfo:
				return loginContextCurrentOrganizationInfoToJson(data as LoginContextCurrentOrganizationInfo);
			case LoginContextWeiboAuthInfo:
				return loginContextWeiboAuthInfoToJson(data as LoginContextWeiboAuthInfo);
			case LoginContextWeiboAuthInfoCharset:
				return loginContextWeiboAuthInfoCharsetToJson(data as LoginContextWeiboAuthInfoCharset);
			case LoginContextWeiboAuthInfoCharsetEncoderFallback:
				return loginContextWeiboAuthInfoCharsetEncoderFallbackToJson(data as LoginContextWeiboAuthInfoCharsetEncoderFallback);
			case LoginContextWeiboAuthInfoCharsetDecoderFallback:
				return loginContextWeiboAuthInfoCharsetDecoderFallbackToJson(data as LoginContextWeiboAuthInfoCharsetDecoderFallback);
			case LoginContextUTimeZone:
				return loginContextUTimeZoneToJson(data as LoginContextUTimeZone);
			case LoginContextSTimeZone:
				return loginContextSTimeZoneToJson(data as LoginContextSTimeZone);
			}
			return data as T;
		}
  //Go back to a single instance by type
	static _fromJsonSingle<M>( json) {
		String type = M.toString();
		if(type == (LoginEntity).toString()){
			return LoginEntity().fromJson(json);
		}
		if(type == (LoginContext).toString()){
			return LoginContext().fromJson(json);
		}
		if(type == (LoginContextUseLanguages).toString()){
			return LoginContextUseLanguages().fromJson(json);
		}
		if(type == (LoginContextCurrentOrganizationInfo).toString()){
			return LoginContextCurrentOrganizationInfo().fromJson(json);
		}
		if(type == (LoginContextWeiboAuthInfo).toString()){
			return LoginContextWeiboAuthInfo().fromJson(json);
		}
		if(type == (LoginContextWeiboAuthInfoCharset).toString()){
			return LoginContextWeiboAuthInfoCharset().fromJson(json);
		}
		if(type == (LoginContextWeiboAuthInfoCharsetEncoderFallback).toString()){
			return LoginContextWeiboAuthInfoCharsetEncoderFallback().fromJson(json);
		}
		if(type == (LoginContextWeiboAuthInfoCharsetDecoderFallback).toString()){
			return LoginContextWeiboAuthInfoCharsetDecoderFallback().fromJson(json);
		}
		if(type == (LoginContextUTimeZone).toString()){
			return LoginContextUTimeZone().fromJson(json);
		}
		if(type == (LoginContextSTimeZone).toString()){
			return LoginContextSTimeZone().fromJson(json);
		}

		return null;
	}

  //list is returned by type
	static M _getListChildType<M>(List data) {
		if(<LoginEntity>[] is M){
			return data.map<LoginEntity>((e) => LoginEntity().fromJson(e)).toList() as M;
		}
		if(<LoginContext>[] is M){
			return data.map<LoginContext>((e) => LoginContext().fromJson(e)).toList() as M;
		}
		if(<LoginContextUseLanguages>[] is M){
			return data.map<LoginContextUseLanguages>((e) => LoginContextUseLanguages().fromJson(e)).toList() as M;
		}
		if(<LoginContextCurrentOrganizationInfo>[] is M){
			return data.map<LoginContextCurrentOrganizationInfo>((e) => LoginContextCurrentOrganizationInfo().fromJson(e)).toList() as M;
		}
		if(<LoginContextWeiboAuthInfo>[] is M){
			return data.map<LoginContextWeiboAuthInfo>((e) => LoginContextWeiboAuthInfo().fromJson(e)).toList() as M;
		}
		if(<LoginContextWeiboAuthInfoCharset>[] is M){
			return data.map<LoginContextWeiboAuthInfoCharset>((e) => LoginContextWeiboAuthInfoCharset().fromJson(e)).toList() as M;
		}
		if(<LoginContextWeiboAuthInfoCharsetEncoderFallback>[] is M){
			return data.map<LoginContextWeiboAuthInfoCharsetEncoderFallback>((e) => LoginContextWeiboAuthInfoCharsetEncoderFallback().fromJson(e)).toList() as M;
		}
		if(<LoginContextWeiboAuthInfoCharsetDecoderFallback>[] is M){
			return data.map<LoginContextWeiboAuthInfoCharsetDecoderFallback>((e) => LoginContextWeiboAuthInfoCharsetDecoderFallback().fromJson(e)).toList() as M;
		}
		if(<LoginContextUTimeZone>[] is M){
			return data.map<LoginContextUTimeZone>((e) => LoginContextUTimeZone().fromJson(e)).toList() as M;
		}
		if(<LoginContextSTimeZone>[] is M){
			return data.map<LoginContextSTimeZone>((e) => LoginContextSTimeZone().fromJson(e)).toList() as M;
		}

		throw Exception("not found");
	}

  static M fromJsonAsT<M>(json) {
		if (json is List) {
			return _getListChildType<M>(json);
		} else {
			return _fromJsonSingle<M>(json) as M;
		}
	}
}